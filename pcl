# Based on https://github.com/tkkhuu/camera_lidar_calibration.git
# Adapted for CLion remote use
# To configure CLion see: https://austinmorlan.com/posts/docker_clion_development/

#ARG DEBIAN_FRONTEND=noninteractive
#ARG DEBCONF_NONINTERACTIVE_SEEN=true
#ARG DISPLAY
FROM nvidia/opengl:1.2-glvnd-runtime-ubuntu20.04


# ================================================ NVIDIA CUDA Installation ================================================
# Example from https://gitlab.com/nvidia/container-images/cuda/-/blob/master/dist/10.2/ubuntu18.04-x86_64/base/Dockerfile

ENV TERM xterm-256color

RUN apt-get update && apt-get install -y --no-install-recommends dialog apt-utils
RUN apt-get install -y --no-install-recommends apt-utils wget gnupg2 curl ca-certificates && \
    # curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub | apt-key add - && \
    # echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    # echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get purge --autoremove -y curl && \
    rm -rf /var/lib/apt/lists/*


# ================================================ Update NVIDIA Repos Public Keys ================================================
WORKDIR /tmp
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb

RUN echo "\n11111\n"

ENV CUDA_VERSION 11.3
ENV CUDA_PKG_VERSION 11-3=$CUDA_VERSION.109-1

# ================================
# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-$CUDA_PKG_VERSION \
    cuda-compat-11-3 \
    && ln -s cuda-11.3 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility,graphics
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.0 driver>=450"
# ======== Installing basic dependencies ========

RUN apt-get update \
    && apt-get install -y \
        build-essential \
        apt-utils \
        wget \
        unzip \
        git

RUN echo "\n22222\n"

# ======== Installing CMake ========
WORKDIR /tmp

RUN apt-get update \
    && apt-get install -y \
        libssl-dev \
        libgl1-mesa-dev

ENV CMAKE_VERSION="3.10.2"
RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz \
    && tar -xvf cmake-${CMAKE_VERSION}.tar.gz \
    && cd cmake-${CMAKE_VERSION} \
    && ./bootstrap -- -DCMAKE_BUILD_TYPE:STRING=Release \
    && make \
    && make install

RUN echo "\nCMAKE BUILDDDDDDDDDDD\n"
# ======== Installing VTK ========
WORKDIR /tmp

RUN apt-get update && apt-get install -y \
    libxt-dev 

RUN wget https://www.vtk.org/files/release/8.2/VTK-8.2.0.tar.gz \
    && tar -xf VTK-8.2.0.tar.gz \
    && cd VTK-8.2.0 && mkdir build && cd build \
    && cmake .. -DVTK_MODULE_ENABLE_VTK_RenderingContextOpenGL2=YES \
                -DCMAKE_BUILD_TYPE=Release \
    && make -j$(nproc) \
    && make install

# ======== Installing PCL library ========
WORKDIR /tmp
ENV PCL_VERSION="1.11.0"

RUN DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
# PCL dependencies
RUN apt-get install -y \
    libeigen3-dev \
    libflann-dev \
    libglu1-mesa-dev \
    freeglut3-dev \
    mesa-common-dev \
    libboost-all-dev \
    libusb-1.0-0-dev \
    libusb-dev \
    libopenni-dev \
    libopenni2-dev \
    libpcap-dev \
    libpng-dev \
    mpi-default-dev \
    openmpi-bin \
    openmpi-common \
    libqhull-dev \
    libgtest-dev

RUN wget https://github.com/PointCloudLibrary/pcl/archive/pcl-${PCL_VERSION}.tar.gz \
    && tar -xf pcl-${PCL_VERSION}.tar.gz \
    && cd pcl-pcl-${PCL_VERSION} \
    && mkdir build && cd build\
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DVTK_RENDERING_BACKEND=OpenGL2 \
    && make -j$(nproc)\
    && make install

RUN apt-get update && apt-get install -y pcl-tools

RUN unset PCL_VERSION

# ======== Installing OpenCV library ========
RUN apt-get install -y \
    libgtk2.0-dev \
    pkg-config \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    x11-apps \
    zlib1g-dev ffmpeg libwebp-dev \
    libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev

RUN DEBIAN_FRONTEND=noninteractive apt-get install lightdm -y

RUN DEBIAN_FRONTEND=noninteractive apt-get install libatlas-base-dev -y

# ENV CUDADIR=/usr/local/cuda

WORKDIR /tmp
ENV OPENCV_VERSION="4.5.2"
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.tar.gz \
    && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/${OPENCV_VERSION}.zip \
    && tar -xf ${OPENCV_VERSION}.tar.gz \
    && unzip opencv_contrib.zip \
    && apt-get install python3-pip -y \
    && pip3 install numpy \
    && cd opencv-${OPENCV_VERSION} \
    && mkdir build && cd build \
    && cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_opencv_python3=ON -D WITH_CUDA=ON -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda -D WITH_GTK=ON -D WITH_VTK=ON -D CUDA_ARCH_BIN=6.0 6.1 7.0 7.5 8.6 -D INSTALL_C_EXAMPLES=ON -D WITH_TBB=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D WITH_CUDNN=ON -D OPENCV_DNN_CUDA=ON -D PYTHON_EXECUTABLE=/usr/bin/python3 -D OPENCV_PYTHON3_INSTALL_PATH=/usr/local/lib/python3.8/dist-packages -D BUILD_EXAMPLES=OFF -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules .. \
    && make -j$(nproc) \
    && make install

# ======== Installing productivity tools ========
RUN apt-get install -y \
    sudo \
    vim \
    terminator \
    dbus \
    dbus-x11

# ======== Install extra stuff for IDE compatibility ========
RUN apt-get install -y \
    gdb \
    curl \
    rsync \
    openssh-server

# ======== start ssh ============
RUN ssh-keygen -A  && service ssh start

# ======== install sublime text ==========
RUN wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
RUN sudo apt-get install apt-transport-https
RUN echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
RUN sudo apt-get update
RUN sudo apt-get install sublime-text

# RUN unset DEBIAN_FRONTEND

# ======== user config ==========
#Add new sudo user
ENV USERNAME micropolis
RUN useradd -m $USERNAME && \
        echo "$USERNAME:$USERNAME" | chpasswd && \
        usermod --shell /bin/bash $USERNAME && \
        usermod -aG sudo $USERNAME && \
        echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME && \
        # Replace 1000 with your user/group id
        usermod  --uid 1000 $USERNAME && \
        groupmod --gid 1000 $USERNAME

# ======== Building SFND Environment ========
WORKDIR /home/$USERNAME
#ADD ./git_repos/SFND_Lidar_Obstacle_Detection/ .
#RUN cd SFND_Lidar_Obstacle_Detection \
#    && mkdir build && cd build \
#    && cmake .. \
#    && make

CMD [ "bash" ]